Creating Image Streams Objective


Describing an Image Stream
An image stream resource represents a set of container images identified by tags. An image stream can group images from multiple sources, such as:
• The OpenShift internal registry
• Other image streams
• External registries

Image streams have multiple uses in an OpenShift cluster. The main use is to provide a short name for a container image. The image stream name replaces a long container image URL and insulates a developer from environment issues.

Take, for example, the predefined php image stream in the openshift project. It references the S2I builder image for the PHP programming language. Depending on your environment, this container image might come from different places, such as:

• The Red Hat Registry at registry.access.redhat.com
• A Red Hat Satellite server in the corporate headquarters
• An enterprise registry in a departmental LAN
• An enterprise registry in a cloud provider

OpenShift defines two other resource types closely related to image streams:

- Image Stream Tag
An image stream tag is a named pointer to an image in an image stream. It contains a history of images that the tag pointed to. Tracking history facilitates operations such as rolling back a deployment.

- Image Stream Mapping
An image stream mapping stores detailed metadata, such as environment variables and entry point, from images stored in the OpenShift internal registry.
OpenShift users and administrators manage image streams and image stream tags directly from the CLI and the web console. OpenShift components, such as the internal registry, manage image stream mappings. Image stream mapping resources are protected from both regular and administrator user accounts.
An OpenShift user refers to image streams most of the times, and OpenShift resources refers to image stream tags. When a user command references an image stream, a reference to the latest tag for that image stream is implicit.


Managing Image Streams and Tags
Image streams and tags are created automatically by OpenShift in a number of different scenarios, such as:
• The oc new-app command creates image streams and tags that get used by application images generated by a source-to-image build, parent container images from docker build, pre- built application container images, and so on.
• Templates create image streams as required by the resource list in the template.
• Uploading container images to the internal registry creates an image stream describing the new image.

To manually create an image stream, use the oc import-image command. The following example creates an image stream for a container image from an external registry:
 
$ oc import-image myis --confirm --insecure --from registry.example.com:5000/myimage

The --confirm option creates a new image stream. Without this option, the oc import- image command edits an existing image stream.
The --insecure option specifies that the container image is stored in an insecure registry accessed using either HTTP or an untrusted TLS certificate.
The --from option provides the complete URL to the container image in the external registry.

If you add the --all option to the oc import-image command, it adds all tags that exist in the target image to the image stream. If not, the command creates only an image stream tag that points to the tag referenced in the --from option argument. Recall that the latest tag is implicit if no tag is given.

To update and image stream and its image stream tags after a container image is updated in an external registry, use the oc import-image command without the --confirm and --from options:
oc import-image myis


If the oc import-image command finds the image was changed, it triggers image change events for any OpenShift build and deployment configurations that reference the image stream.


-------

[root@myserver100 gitdir]# cd

[root@myserver100 ~]# oc get is -n openshift
NAME             DOCKER REPO                                TAGS                          UPDATED
dotnet           172.30.1.1:5000/openshift/dotnet           2.0,latest                    About an hour ago
dotnet-runtime   172.30.1.1:5000/openshift/dotnet-runtime   latest,2.0                    About an hour ago
httpd            172.30.1.1:5000/openshift/httpd            2.4,latest                    About an hour ago
jenkins          172.30.1.1:5000/openshift/jenkins          1,2,latest                    About an hour ago
mariadb          172.30.1.1:5000/openshift/mariadb          10.1,10.2,latest              About an hour ago
mongodb          172.30.1.1:5000/openshift/mongodb          2.4,2.6,3.2 + 2 more...       About an hour ago
mysql            172.30.1.1:5000/openshift/mysql            latest,5.5,5.6 + 1 more...    About an hour ago
nginx            172.30.1.1:5000/openshift/nginx            1.8,latest,1.10 + 1 more...   About an hour ago
nodejs           172.30.1.1:5000/openshift/nodejs           0.10,4,6 + 2 more...          About an hour ago
perl             172.30.1.1:5000/openshift/perl             5.16,5.20,5.24 + 1 more...    About an hour ago
php              172.30.1.1:5000/openshift/php              5.5,5.6,7.0 + 2 more...       About an hour ago
postgresql       172.30.1.1:5000/openshift/postgresql       9.5,9.6,latest + 2 more...    About an hour ago
python           172.30.1.1:5000/openshift/python           2.7,3.3,3.4 + 3 more...       About an hour ago
redis            172.30.1.1:5000/openshift/redis            3.2,latest                    About an hour ago
ruby             172.30.1.1:5000/openshift/ruby             2.0,2.2,2.3 + 2 more...       About an hour ago
wildfly          172.30.1.1:5000/openshift/wildfly          10.0,10.1,8.1 + 2 more...     About an hour ago

[root@myserver100 ~]# oc get is/php -n openshift
NAME      DOCKER REPO                     TAGS                         UPDATED
php       172.30.1.1:5000/openshift/php   7.1,latest,5.5 + 2 more...   About an hour ago


[root@myserver100 ~]# oc get is/php -o yaml -n openshift

apiVersion: image.openshift.io/v1
kind: ImageStream
metadata:
  annotations:
    openshift.io/display-name: PHP
    openshift.io/image.dockerRepositoryCheck: 2020-05-12T07:00:33Z
  creationTimestamp: 2020-05-12T07:00:07Z
  generation: 2
  name: php
  namespace: openshift
  resourceVersion: "1235"
  selfLink: /apis/image.openshift.io/v1/namespaces/openshift/imagestreams/php
  uid: 36ad7e18-941e-11ea-861c-000c298f8070
spec:
  lookupPolicy:
    local: false
  tags:
  - annotations:
      description: Build and run PHP 5.5 applications on CentOS 7. For more information
        about using this builder image, including OpenShift considerations, see https://github.com/sclorg/s2i-php-container/blob/master/5.5/README.md.
      iconClass: icon-php
      openshift.io/display-name: PHP 5.5
      openshift.io/provider-display-name: Red Hat, Inc.
      sampleRepo: https://github.com/openshift/cakephp-ex.git
      supports: php:5.5,php
      tags: hidden,builder,php
      version: "5.5"
    from:
      kind: DockerImage
      name: docker.io/openshift/php-55-centos7:latest
    generation: 2
    importPolicy: {}
    name: "5.5"
    referencePolicy:
      type: Source
  - annotations:
      description: Build and run PHP 5.6 applications on CentOS 7. For more information
        about using this builder image, including OpenShift considerations, see https://github.com/sclorg/s2i-php-container/blob/master/5.6/README.md.
      iconClass: icon-php
      openshift.io/display-name: PHP 5.6
      openshift.io/provider-display-name: Red Hat, Inc.
      sampleRepo: https://github.com/openshift/cakephp-ex.git
      supports: php:5.6,php
      tags: builder,php
      version: "5.6"
    from:
      kind: DockerImage
      name: docker.io/centos/php-56-centos7:latest
    generation: 2
    importPolicy: {}
    name: "5.6"
    referencePolicy:
      type: Source
  - annotations:
      description: Build and run PHP 7.0 applications on CentOS 7. For more information
        about using this builder image, including OpenShift considerations, see https://github.com/sclorg/s2i-php-container/blob/master/7.0/README.md.
      iconClass: icon-php
      openshift.io/display-name: PHP 7.0
      openshift.io/provider-display-name: Red Hat, Inc.
      sampleRepo: https://github.com/openshift/cakephp-ex.git
      supports: php:7.0,php
      tags: builder,php
      version: "7.0"
    from:
      kind: DockerImage
      name: docker.io/centos/php-70-centos7:latest
    generation: 2
    importPolicy: {}
    name: "7.0"
    referencePolicy:
      type: Source
  - annotations:
      description: Build and run PHP 7.1 applications on CentOS 7. For more information
        about using this builder image, including OpenShift considerations, see https://github.com/sclorg/s2i-php-container/blob/master/7.1/README.md.
      iconClass: icon-php
      openshift.io/display-name: PHP 7.1
      openshift.io/provider-display-name: Red Hat, Inc.
      sampleRepo: https://github.com/openshift/cakephp-ex.git
      supports: php:7.1,php
      tags: builder,php
      version: "7.1"
    from:
      kind: DockerImage
      name: docker.io/centos/php-71-centos7:latest
    generation: 2
    importPolicy: {}
    name: "7.1"
    referencePolicy:
      type: Source
  - annotations:
      description: |-
        Build and run PHP applications on CentOS 7. For more information about using this builder image, including OpenShift considerations, see https://github.com/sclorg/s2i-php-container/blob/master/7.1/README.md.

        WARNING: By selecting this tag, your application will automatically update to use the latest version of PHP available on OpenShift, including major versions updates.
      iconClass: icon-php
      openshift.io/display-name: PHP (Latest)
      openshift.io/provider-display-name: Red Hat, Inc.
      sampleRepo: https://github.com/openshift/cakephp-ex.git
      supports: php
      tags: builder,php
    from:
      kind: ImageStreamTag
      name: "7.1"
    generation: 1
    importPolicy: {}
    name: latest
    referencePolicy:
      type: Source
status:
  dockerImageRepository: 172.30.1.1:5000/openshift/php
  tags:
  - items:
    - created: 2020-05-12T07:00:33Z
      dockerImageReference: docker.io/openshift/php-55-centos7@sha256:1478800585f06a6c0feeb8301ceb54059d54816762de9f6b1182c3d52c75ac84
      generation: 2
      image: sha256:1478800585f06a6c0feeb8301ceb54059d54816762de9f6b1182c3d52c75ac84
    tag: "5.5"
  - items:
    - created: 2020-05-12T07:00:33Z
      dockerImageReference: docker.io/centos/php-56-centos7@sha256:f3c95020fa870fcefa7d1440d07a2b947834b87bdaf000588e84ef4a599c7546
      generation: 2
      image: sha256:f3c95020fa870fcefa7d1440d07a2b947834b87bdaf000588e84ef4a599c7546
    tag: "5.6"
  - items:
    - created: 2020-05-12T07:00:33Z
      dockerImageReference: docker.io/centos/php-70-centos7@sha256:e8b78ce0bc74a96bef4676126522717f3612e715d18888b1c8c9dbbfb9fa89c8
      generation: 2
      image: sha256:e8b78ce0bc74a96bef4676126522717f3612e715d18888b1c8c9dbbfb9fa89c8
    tag: "7.0"
  - items:
    - created: 2020-05-12T07:00:33Z
      dockerImageReference: docker.io/centos/php-71-centos7@sha256:1ff68d2e3445091561a258c94c33d73655c44f90fa408a91eeb74f496268f402
      generation: 2
      image: sha256:1ff68d2e3445091561a258c94c33d73655c44f90fa408a91eeb74f496268f402
    tag: "7.1"
  - items:
    - created: 2020-05-12T07:00:33Z
      dockerImageReference: docker.io/centos/php-71-centos7@sha256:1ff68d2e3445091561a258c94c33d73655c44f90fa408a91eeb74f496268f402
      generation: 2
      image: sha256:1ff68d2e3445091561a258c94c33d73655c44f90fa408a91eeb74f496268f402
    tag: latest
[root@myserver100 ~]# 

# docker login
Login with your Docker ID to push and pull images from Docker Hub. If you don't have a Docker ID, head over to https://hub.docker.com to create one.
Username: furqanpr
Password: 
WARNING! Your password will be stored unencrypted in /root/.docker/config.json.
Configure a credential helper to remove this warning. See
https://docs.docker.com/engine/reference/commandline/login/#credentials-store

Login Succeeded

As Developer

# oc project openshift ---> public image stream (accessible from all project)
# oc import-image golang --confirm --from docker.io/golang:latest -n openshift

# oc import-image golang --confirm --from docker.io/golang:1.1 -n openshift
# oc import-image golang --confirm --from docker.io/golang:2.5 -n openshift

golang:latest
golang:1.1
golang:2.5


The import completed successfully.

Name:			golang
Namespace:		mywebserver
Created:		Less than a second ago
Labels:			<none>
Annotations:		openshift.io/image.dockerRepositoryCheck=2020-05-12T08:04:29Z
Docker Pull Spec:	172.30.1.1:5000/mywebserver/golang
Image Lookup:		local=false
Unique Images:		1
Tags:			1

latest
  tagged from docker.io/golang

  * docker.io/golang@sha256:09b04534495af5148e4cc67c8ac55408307c2d7b9e6ce70f6e05f7f02e427f68
      Less than a second ago

Image Name:	golang:latest
Docker Image:	docker.io/golang@sha256:09b04534495af5148e4cc67c8ac55408307c2d7b9e6ce70f6e05f7f02e427f68
Name:		sha256:09b04534495af5148e4cc67c8ac55408307c2d7b9e6ce70f6e05f7f02e427f68
Created:	Less than a second ago
Annotations:	image.openshift.io/dockerLayersOrder=ascending
Image Size:	312.3MB (first layer 50.38MB, last binary layer 126B)
Image Created:	2 weeks ago
Author:		<none>
Arch:		amd64
Command:	bash
Working Dir:	/go
User:		<none>
Exposes Ports:	<none>
Docker Labels:	<none>
Environment:	PATH=/go/bin:/usr/local/go/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
		GOLANG_VERSION=1.14.2
		GOPATH=/go


# oc get is
NAME             DOCKER REPO                                  TAGS      UPDATED
golang           172.30.1.1:5000/mywebserver/golang           latest    About a minute ago
httpd-24-rhel7   172.30.1.1:5000/mywebserver/httpd-24-rhel7   latest    45 minutes ago

# oc get is/golang -o yaml
apiVersion: image.openshift.io/v1
kind: ImageStream
metadata:
  annotations:
    openshift.io/image.dockerRepositoryCheck: 2020-05-12T08:04:29Z
  creationTimestamp: 2020-05-12T08:04:29Z
  generation: 1
  name: golang
  namespace: mywebserver
  resourceVersion: "6847"
  selfLink: /apis/image.openshift.io/v1/namespaces/mywebserver/imagestreams/golang
  uid: 34a556e6-9427-11ea-861c-000c298f8070
spec:
  lookupPolicy:
    local: false
  tags:
  - annotations: null
    from:
      kind: DockerImage
      name: docker.io/golang
    generation: 1
    importPolicy: {}
    name: latest
    referencePolicy:
      type: Source
status:
  dockerImageRepository: 172.30.1.1:5000/mywebserver/golang
  tags:
  - items:
    - created: 2020-05-12T08:04:29Z
      dockerImageReference: docker.io/golang@sha256:09b04534495af5148e4cc67c8ac55408307c2d7b9e6ce70f6e05f7f02e427f68
      generation: 1
      image: sha256:09b04534495af5148e4cc67c8ac55408307c2d7b9e6ce70f6e05f7f02e427f68
    tag: latest


# oc new-app golang~https://github.com/furqanpr/go-hello.git --name go-helloworld
error: the image match "mywebserver/golang:latest" for source repository "https://github.com/furqanpr/go-hello.git" does not appear to be a source-to-image builder.

- to attempt to use this image as a source builder, pass "--strategy=source"
- to use it as a base image for a Docker build, pass "--strategy=docker"


# oc new-app golang~https://github.com/furqanpr/go-hello.git --strategy=source --name go-helloworld
--> Found image 2421885 (2 weeks old) in image stream "mywebserver/golang" under tag "latest" for "golang"

    * A source build using source code from https://github.com/furqanpr/go-hello.git will be created
      * The resulting image will be pushed to image stream "go-helloworld:latest"
      * Use 'start-build' to trigger a new build
    * This image will be deployed in deployment config "go-helloworld"
    * The image does not expose any ports - if you want to load balance or send traffic to this component
      you will need to create a service with 'expose dc/go-helloworld --port=[port]' later
    * WARNING: Image "mywebserver/golang:latest" runs as the 'root' user which may not be permitted by your cluster administrator

--> Creating resources ...
    imagestream "go-helloworld" created
    buildconfig "go-helloworld" created
    deploymentconfig "go-helloworld" created
--> Success
    Build scheduled, use 'oc logs -f bc/go-helloworld' to track its progress.
    Run 'oc status' to view your app.


# oc logs -f builds/go-helloworld-1 
Cloning "https://github.com/furqanpr/go-hello.git" ...
WARNING: timed out waiting for git server, will wait 1m4s
WARNING: timed out waiting for git server, will wait 4m16s

# oc get all
NAME                               REVISION   DESIRED   CURRENT   TRIGGERED BY
deploymentconfigs/go-helloworld    0          1         0         config,image(go-helloworld:latest)
deploymentconfigs/httpd-24-rhel7   1          1         1         config,image(httpd-24-rhel7:latest)

NAME                         TYPE      FROM      LATEST
buildconfigs/go-helloworld   Source    Git       1

NAME                     TYPE      FROM      STATUS                       STARTED         DURATION
builds/go-helloworld-1   Source    Git       Failed (FetchSourceFailed)   2 minutes ago   1m53s

NAME                          DOCKER REPO                                  TAGS      UPDATED
imagestreams/go-helloworld    172.30.1.1:5000/mywebserver/go-helloworld              
imagestreams/golang           172.30.1.1:5000/mywebserver/golang           latest    15 minutes ago
imagestreams/httpd-24-rhel7   172.30.1.1:5000/mywebserver/httpd-24-rhel7   latest    About an hour ago

NAME                    HOST/PORT                                PATH      SERVICES         PORT       TERMINATION   WILDCARD
routes/httpd-24-rhel7   httpd-24-rhel7-mywebserver.furqanpr.io             httpd-24-rhel7   8080-tcp                 None

NAME                        READY     STATUS       RESTARTS   AGE
po/go-helloworld-1-build    0/1       Init:Error   0          2m
po/httpd-24-rhel7-1-wvlwf   1/1       Running      0          1h

NAME                  DESIRED   CURRENT   READY     AGE
rc/httpd-24-rhel7-1   1         1         1         1h

NAME                 TYPE        CLUSTER-IP       EXTERNAL-IP   PORT(S)             AGE
svc/httpd-24-rhel7   ClusterIP   172.30.242.130   <none>        8080/TCP,8443/TCP   1h

